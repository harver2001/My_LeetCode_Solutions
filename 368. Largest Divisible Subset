class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n,1);
        sort(nums.begin(),nums.end());
        for(int i = 0;i<n;i++){
            for(int j = i-1;j>=0;j--){
                if((nums[i] % nums[j]) == 0) dp[i] = max(dp[i],dp[j]+1);
            }
        }
        vector<int> ans;
        int maxim = dp[0];
        int maxInd = 0;
        for(int i = n-1;i>=0;i--){
            if(dp[i] > maxim){
                maxim = dp[i];
                maxInd = i;
            }
        }
        maxim++;
        int prev = nums[maxInd];
        for(int i = maxInd;i>=0;i--){
            if(((prev % nums[i]) == 0) && (dp[i] == (maxim-1))){
                prev = nums[i];
                maxim--;
                ans.push_back(nums[i]);
            }
        }
        return ans;
    }
};
