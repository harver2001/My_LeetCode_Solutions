class Solution {
public:
    int ans = 0;
    int logic(vector<int>& nums1, vector<int>& nums2, int prevArr, int ind, vector<vector<int>>& dp){
        int n = nums1.size();
        if(ind == n){
            return 0;
        }
        if(dp[ind][prevArr] != -1) return dp[ind][prevArr];
        int a = 0;
        int b = 0;
        int c = 0;
        if(prevArr == 1){
            if(nums1[ind] >= nums1[ind-1]) a = 1 + logic(nums1,nums2,1,ind+1,dp);
            if(nums2[ind] >= nums1[ind-1]) b = 1 + logic(nums1,nums2,2,ind+1,dp);
            // if we dont satisfy any of the above conditions then that means we are done with this new array currently we are carrying and it will end there itself and regarding the portion of remaining part of array the last else condition will take care of it as it eneables our third array to START from every index so in one case it will also start the index where we ended this time here
        }
        else if(prevArr == 2){
            if(nums1[ind] >= nums2[ind-1]) a = 1 + logic(nums1,nums2,1,ind+1,dp);
            if(nums2[ind] >= nums2[ind-1]) b = 1 + logic(nums1,nums2,2,ind+1,dp);
        }
        else{
            a = 1+logic(nums1,nums2,1,ind+1,dp);
            b = 1+logic(nums1,nums2,2,ind+1,dp);
            c = logic(nums1,nums2,0,ind+1,dp); // this line indicates that we are starting from this index and we dont have anything from behind from any array
        }
        ans = max(c,max(a,b));
        return dp[ind][prevArr] = ans;
    }
    int maxNonDecreasingLength(vector<int>& nums1, vector<int>& nums2) {
        vector<vector<int>> dp(nums1.size(),vector<int> (3,-1));
        return logic(nums1,nums2,0,0,dp);
    }
};
