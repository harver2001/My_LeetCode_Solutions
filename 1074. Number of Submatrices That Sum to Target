class Solution {
public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> v = matrix;
        for(int i = 0;i<m;i++){
            for(int j = 1;j<n;j++){
                v[i][j] += v[i][j-1];
            }
        }
        int ans = 0;
        for(int c1 = 0;c1<n;c1++){
            for(int c2 = c1;c2<n;c2++){ // we are taking two columns c1 & c2 as fixed and finding sub matrixes with target sum in those 2 columns with varying rows
                unordered_map<int,int> mp;
                mp[0] = 1;
                int submatrixSum = 0;
                for(int i = 0;i<m;i++){
                    submatrixSum += v[i][c2] - ((c1 > 0) ? v[i][c1-1] : 0);
                    if(mp.count(submatrixSum - target)) ans += mp[submatrixSum - target];
                    mp[submatrixSum]++;
                }
            }
        }
        return ans;
    }
};
