bool isValid(int ind, int color, vector<int>& colors, bool graph[101][101], int n){
        for(int i = 0;i<n;i++){ // looping for all nodes that are connnected to our current concerned node
            if(graph[ind][i] == 1){ // there is a connection between ind node and ith node
                if(colors[i] == color) return false; // the node (ith) that has connection with ind node has already been colored with same color
            }
        }
        return true;
    }
    bool logic(bool graph[101][101], int m, int n, vector<int>& colors, int ind){
        if(ind == n) return true; // if in any case we could reach after last index that means we have succuesfuly coloured n nodes 
        for(int i = 0;i<m;i++){ // looping for all colour combinations possible
            if(isValid(ind,i,colors,graph,n)){ // checking if that particular color in this index is possible or not
                colors[ind] = i;
                if(logic(graph,m,n,colors,ind+1)) return true; // check for further indices
                colors[ind] = -1;
            }
        }
        return false;
    }
    bool graphColoring(bool graph[101][101], int m, int n) {
        vector<int> colors(n,-1); // initally all nodes coloures to -1 color
        return logic(graph,m,n,colors,0);
    }
