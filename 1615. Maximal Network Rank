class Solution {
public:
    int maximalNetworkRank(int n, vector<vector<int>>& roads) {
        vector<vector<int>> adj(n,vector<int> (n,0));
        vector<int> points(n,0);
        for(int i = 0;i<roads.size();i++){
            points[roads[i][0]]++;
            points[roads[i][1]]++;
            adj[roads[i][0]][roads[i][1]] = 1;
            adj[roads[i][1]][roads[i][0]] = 1;
        }
        int ans = 0;
        for(int i = 0;i<n;i++){
            for(int j = i+1;j<n;j++){
                int temp = points[i] + points[j] - adj[i][j];
                ans = max(ans,temp);
            }
        }
        return ans;
    }
};
// focus on the word pair of cities in the problem statement ----> this means we have to find the max sum of all pairs of cities and 
// subtract 1 if there exists a direct road between them since that road is bidirectional so it is will be counted twice
