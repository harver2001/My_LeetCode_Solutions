class Solution {
public:
    int dijkstra(vector<vector<int>> &adj, int src, int dest) {
        int V = adj.size();
        vector<int> dist(V, INT_MAX); 
        dist[src] = 0; 
        queue<int> q;
        q.push(src);

        while(!q.empty()) {
            int node = q.front();
            q.pop();

            for(auto &neighbour : adj[node]) {
                if(dist[node] + 1 < dist[neighbour]) {
                    dist[neighbour] = dist[node] + 1;
                    q.push(neighbour);
                }
            }
        }

        return dist[dest];
    }
    vector<int> countOfPairs(int n, int x, int y) {
        vector<vector<int>> adj(n+10);
        vector<int> ans(n+1,0);
        for(int i = 1;i<n;i++){
            adj[i].push_back(i+1);            
            adj[i+1].push_back(i);
        }
        adj[x].push_back(y);
        adj[y].push_back(x);
        for(int i = 1;i<=n;i++){
            for(int j = 1;j<=n;j++){
                if(i != j){
                    int dist = dijkstra(adj,i,j);
                    ans[dist]++;
                }
            }
        }
        vector<int> res;
        for(int i = 1;i<=n;i++) res.push_back(ans[i]);
        return res;
    }
};
