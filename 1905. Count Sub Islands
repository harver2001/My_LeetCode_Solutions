class Solution {
public:
    int ans = 0;
    bool isValid(int m, int n, int i, int j){
        if(i<0 || i>=m) return false;
        if(j<0 || j>=n) return false;
        return true;
    }
    void dfs(vector<vector<int>>& grid1, vector<vector<int>>& grid2, int r, int c, int& res){
        int row[4] = {0,1,0,-1};
        int col[4] = {1,0,-1,0};
        int m = grid1.size();
        int n = grid1[0].size();
        if(grid1[r][c] == 0) res = 0;
        grid2[r][c] = 0;

        for(int i = 0;i<4;i++){
            int nr = r + row[i];
            int nc = c + col[i];
            if(isValid(m,n,nr,nc) && grid2[nr][nc] == 1){
                dfs(grid1,grid2,nr,nc,res);
            }
        }
        
        return;
    }
    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        int m = grid1.size();
        int n = grid1[0].size();

        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                if(grid1[i][j] && grid2[i][j]){
                    int res = 1;
                    dfs(grid1,grid2,i,j,res);
                    ans += res;
                }
            }
        }
        
        return ans;
    }
};
