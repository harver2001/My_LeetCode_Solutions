/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> ans;
        map<int,map<int,multiset<int>>> mp; // map<horizontal distance from root(0,-1,+1,-2....),map<level,list of all elements corresponding to horizontal distance and level
        queue<pair<TreeNode*, pair<int,int>>> q;
        q.push({root, {0,0}});
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto curr = q.front();
                q.pop();
                TreeNode* t = curr.first;
                int h = curr.second.first;
                int v = curr.second.second;
                mp[h][v].insert(t->val);
                if (t->left) q.push({t->left, {h-1,v+1}});
                if (t->right) q.push({t->right, {h+1,v+1}});
            }
        }
        for (auto i : mp) {
            vector<int> temp;
            for(auto j : i.second){
                for(auto k : j.second){
                    temp.push_back(k);
                }
            }
            ans.push_back(temp);
        }
        return ans;
    }
};
